buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        // These docs use an open ended version so that our plugin
        // can be updated quickly in response to Android tooling updates

        // We recommend changing it to the latest version from our changelog:
        // https://docs.fabric.io/android/changelog.html#fabric-gradle-plugin
        classpath 'io.fabric.tools:gradle:1.25.4'
    }
}



apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}


android {
    compileSdkVersion 26



    defaultConfig {
        applicationId "com.ecosystem.kin.app"
        minSdkVersion 19
        targetSdkVersion 26
        multiDexEnabled true
        versionCode 1
        versionName "${SAMPLE_VERSION_NAME}"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        loadCredential()
        buildConfigField "String", "SAMPLE_APP_ID", credentialProperties.getProperty("APP_ID")
        buildConfigField "String", "RS512_PRIVATE_KEY", credentialProperties.getProperty("RS512_PRIVATE_KEY")
        buildConfigField "String", "RS512_PRIVATE_KEY_ID", credentialProperties.getProperty("RS512_PRIVATE_KEY_ID")

        manifestPlaceholders = [crashlytics_api_key: credentialProperties.getProperty("CRASHLYTICS_API_KEY")]
    }

    buildTypes {
        release {
            minifyEnabled true
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

    }

    flavorDimensions "all"
    productFlavors {
        production {
            resValue "string", "app_name", "@string/app_default_name"
            manifestPlaceholders = [environment: "@string/kinecosystem_environment_production"]
        }
        beta {
            applicationIdSuffix ".beta"
            resValue "string", "app_name", "Beta"
            manifestPlaceholders = [environment: "@string/kinecosystem_environment_beta"]
        }
        alpha {
            applicationIdSuffix ".test"
            resValue "string", "app_name", "test"
            manifestPlaceholders = [environment: "test"]
        }
    }



    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "SampleApp-${variant.name}-${variant.versionName}.apk"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':sdk')

   //implementation 'com.github.kinfoundation.kin-ecosystem-android-sdk:sdk:1.0.1'
    implementation 'io.jsonwebtoken:jjwt:0.9.0'
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.4@aar') {
        transitive = true;
    }
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.2'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.2'
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.2'
}


def loadCredential() {
    def crashlytics_demo_api_key = "4b7647b5860d29039e16910e281fcf8d9cad21bb"
    def default_app_id = '"test"'
    def default_rs512_jwt_private_key = '"MIICXQIBAAKBgQCgOMeb0heN3k9NinbsWpRo3WElwGnoP9UCpKsGLbZAzkgE64fP/thj4CH6xnoRsObl4LFdeh9cekXooS19/A+Q9M0kxlrURq8qvogJPSFERi6S7vzMM1LxGmOcgwLLSp4AGZ5A0GkjFXhiZU1hOfb2WmkKeVTyx22Df6Ox6ulslwIDAQABAoGBAIWxm248iwcIgCf16HIkyz4NrGix/C2eRgJkoYkQT8oX1ySz3KoEv0/n0LLPN0DX2nPrYFTd+JlUNk19YNaFo/5BGk0ewUpHaDvNgS52W2rSkxwO+C0K14yrFnjyrFTxytGexBVHyxV6VxYvB/2ZAAjw4C/fn7RIbj5cVsS9/xGBAkEAzloDnbM/uoF6JjioslMLhdgRBgZ8sEjvfk17pExVXF3Lg7o6sMqK9wN5QdI6CDBKDdpYAndHCxxCPd75WKcO4QJBAMbFdAzAl5ZObMrrW3N+To6FKHW8emWcHtPE/hBkzWeBljhVDF5wwjTP0YtgWsSesfy6IsTW0WG7eoZczRJbwncCQQCjcf0HPmGuErxz5dEJXmn0HA5v3VeKMlswiaLzolrCjLCUqD+wpN2phiDXl/LLZaRikJ3BZkTpcfquEx0hsUFBAkAY9IlRYIynjkkSYOImaeEq+4TM41DqmOM16zGKlV1EdXyKrgLTiIyZXM4OFZbPwKzP8f6Tf/ThtEv5uoT0nRiZAkBnWFvJ7RPFcbsKJzNfciakbpi0Hn9W1m+PTa2OfvQHKaZ/jti09jWmU9sPwS2xxOAgx9w0kVViwWaZuypBNrTc"'
    def default_rs512_jwt_private_key_id = '"rs512_0"'
    ant.propertyfile(file: "credential.properties") {
        entry(key: "APP_ID", default: System.getenv('APP_ID') ?: default_app_id)
        entry(key: "RS512_PRIVATE_KEY", default: System.getenv('RS512_PRIVATE_KEY') ?: default_rs512_jwt_private_key)
        entry(key: "RS512_PRIVATE_KEY_ID", default: System.getenv('RS512_PRIVATE_KEY_ID') ?: default_rs512_jwt_private_key_id)
        entry(key: "CRASHLYTICS_API_KEY", default: System.getenv('CRASHLYTICS_API_KEY')  ?: crashlytics_demo_api_key)
    }
    def credentialPropertiesFile = project.file("credential.properties")
    def credentialProperties = new Properties()
    credentialProperties.load(new FileInputStream(credentialPropertiesFile))

    ext.credentialProperties = credentialProperties
}
