/*
 * Kin Ecosystem
 * Apis for client to server interaction
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.kin.ecosystem.core.network.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.kin.ecosystem.core.network.model.Offer.OfferType;
import com.kin.ecosystem.core.util.StringUtil;
import java.io.IOException;

/**
 * a submitted order. it can be pending/completed/failed
 */
public class Order {

    @SerializedName("result")
    @JsonAdapter(OrderSpendResult.Adapter.class)
    private OrderSpendResult result = null;

    @SerializedName("content")
    private String content = null;

    /**
     * Gets or Sets status
     */
    @JsonAdapter(Status.Adapter.class)
    public enum Status {

        PENDING("pending"),
        COMPLETED("completed"),
        DELAYED("delayed"),
        FAILED("failed");

        private String value;

        Status(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static Status fromValue(String text) {
            for (Status b : Status.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }

        public static class Adapter extends TypeAdapter<Status> {

            @Override
            public void write(final JsonWriter jsonWriter, final Status enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public Status read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return Status.fromValue(String.valueOf(value));
            }
        }
    }

	/**
	 * Gets or Sets status
	 */
	@JsonAdapter(Origin.Adapter.class)
	public enum Origin {

		MARKETPLACE("marketplace"),
		EXTERNAL("external");

		private String value;

		Origin(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static Origin fromValue(String text) {
			for (Origin b : Origin.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<Origin> {

			@Override
			public void write(final JsonWriter jsonWriter, final Origin enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public Origin read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return Origin.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("origin")
	private Origin origin = null;
    @SerializedName("status")
    private Status status = null;
    @SerializedName("id")
    private String orderId = null;
    @SerializedName("offer_id")
    private String offerId = null;
    @SerializedName("completion_date")
    private String completionDate = null;
    @SerializedName("blockchain_data")
    private BlockchainData blockchainData = null;
    @SerializedName("offer_type")
    private OfferType offerType = null;
    @SerializedName("title")
    private String title = null;
    @SerializedName("description")
    private String description = null;
    @SerializedName("call_to_action")
    private String callToAction = null;
    @SerializedName("amount")
    private Integer amount = null;
    @SerializedName("error")
    private Error error = null;

    public Order result(OrderSpendResult result) {
        this.result = result;
        return this;
    }


    /**
     * * empty when no result (pending status, completed earn) * failure_message when status is failed * coupon_code
     * when completed spend
     *
     * @return result
     **/
    public OrderSpendResult getResult() {
        return result;
    }

    public void setResult(OrderSpendResult result) {
        this.result = result;
    }

    public Order status(Status status) {
        this.status = status;
        return this;
    }


    /**
     * Get status
     *
     * @return status
     **/
    public Status getStatus() {
        return status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }

	/**
	 * Get origin
	 *
	 * @return origin
	 **/
	public Origin getOrigin() {
		return origin;
	}

	public void setOrigin(Origin origin) {
		this.origin = origin;
	}

    public Order orderId(String orderId) {
        this.orderId = orderId;
        return this;
    }


    /**
     * unique identifier of this item
     *
     * @return orderId
     **/
    public String getOrderId() {
        return orderId;
    }

    public void setOrderId(String orderId) {
        this.orderId = orderId;
    }

    public String getOfferId() {
        return offerId;
    }

    public Order offerId(String offerId) {
        this.offerId = offerId;
        return this;
    }

    public Order completionDate(String completionDate) {
        this.completionDate = completionDate;
        return this;
    }


    /**
     * UTC ISO
     *
     * @return completionDate
     **/
    public String getCompletionDate() {
        return completionDate;
    }

    public void setCompletionDate(String completionDate) {
        this.completionDate = completionDate;
    }

    public Order blockchainData(BlockchainData blockchainData) {
        this.blockchainData = blockchainData;
        return this;
    }


    /**
     * Get blockchainData
     *
     * @return blockchainData
     **/
    public BlockchainData getBlockchainData() {
        return blockchainData;
    }

    public void setBlockchainData(BlockchainData blockchainData) {
        this.blockchainData = blockchainData;
    }

    public Order offerType(OfferType offerType) {
        this.offerType = offerType;
        return this;
    }


    /**
     * Get offerType
     *
     * @return offerType
     **/
    public OfferType getOfferType() {
        return offerType;
    }

    public void setOfferType(OfferType offerType) {
        this.offerType = offerType;
    }

    public Order title(String title) {
        this.title = title;
        return this;
    }


    /**
     * usually a brand name
     *
     * @return title
     **/
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Order description(String description) {
        this.description = description;
        return this;
    }


    /**
     * Get description
     *
     * @return description
     **/
    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Order callToAction(String callToAction) {
        this.callToAction = callToAction;
        return this;
    }


    /**
     * Get callToAction
     *
     * @return callToAction
     **/
    public String getCallToAction() {
        return callToAction;
    }

    public void setCallToAction(String callToAction) {
        this.callToAction = callToAction;
    }

    public Order amount(Integer amount) {
        this.amount = amount;
        return this;
    }


    /**
     * kin amount
     *
     * @return amount
     **/
    public Integer getAmount() {
        return amount;
    }

    public void setAmount(Integer amount) {
        this.amount = amount;
    }

    public String getContent() {
        return content;
    }

    public Order error(Error error) {
        this.error = error;
        return this;
    }

    public Error getError() {
        return error;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Order order = (Order) o;
        return this.orderId.equals(order.orderId);
    }

    @Override
    public int hashCode() {
        return result.hashCode() + status.hashCode() +  orderId.hashCode() +
            completionDate.hashCode() +  blockchainData.hashCode() + origin.hashCode() +
            offerType.hashCode() +  title.hashCode() +  description.hashCode() +
            callToAction.hashCode() + amount.hashCode();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Order {\n");

        sb.append("    id: ").append(StringUtil.toIndentedString(orderId)).append("\n");
        sb.append("    offerId: ").append(StringUtil.toIndentedString(offerId)).append("\n");
        sb.append("    result: ").append(StringUtil.toIndentedString(result)).append("\n");
        sb.append("    status: ").append(StringUtil.toIndentedString(status)).append("\n");
        sb.append("    origin: ").append(StringUtil.toIndentedString(origin)).append("\n");
        sb.append("    completionDate: ").append(StringUtil.toIndentedString(completionDate)).append("\n");
        sb.append("    blockchainData: ").append(StringUtil.toIndentedString(blockchainData)).append("\n");
        sb.append("    offerType: ").append(StringUtil.toIndentedString(offerType)).append("\n");
        sb.append("    title: ").append(StringUtil.toIndentedString(title)).append("\n");
        sb.append("    description: ").append(StringUtil.toIndentedString(description)).append("\n");
        sb.append("    callToAction: ").append(StringUtil.toIndentedString(callToAction)).append("\n");
        sb.append("    amount: ").append(StringUtil.toIndentedString(amount)).append("\n");
        sb.append("}");
        return sb.toString();
    }
}



